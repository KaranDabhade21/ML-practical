import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns 
from sklearn.preprocessing import StandardScaler
from sklearn.neighbors import KNeighborsClassifier
from sklearn.model_selection import train_test_split
from sklearn.metrics import confusion_matrix, f1_score, recall_score, precision_score,accuracy_score


df=pd.read_csv("C:\\Users\\Admin\\Downloads\\diabetes.csv")
print(df.head() ) 
print(df.shape)


print(df.describe() )
zero_not_accepted=["Glucose","BloodPressure","SkinThickness","BMI","Insulin"]
for column in zero_not_accepted:     
    df[column]=df[column].replace(0,np.NaN)     
    mean=int(df[column].mean(skipna=True))     
    df[column]=df[column].replace(np.NaN,mean) 
    df["Glucose"] 
X=df.iloc[:,0:8] 
y=df.iloc[:,8] 
X_train,X_test,y_train,y_test=train_test_split(X,y,random_state=0,test_size=0.2) 
#feature Scaling 
sc_X=StandardScaler() 
X_train=sc_X.fit_transform(X_train) 
 
X_test=sc_X.transform(X_test) 
knn=KNeighborsClassifier(n_neighbors=11) 
 
knn.fit(X_train,y_train) 
 
y_pred=knn.predict(X_test) 
 
#Evaluate The Model
cf_matrix=confusion_matrix(y_test,y_pred) 
 
ax = sns.heatmap(cf_matrix, annot=True, cmap='Blues') 
 
ax.set_title('Seaborn Confusion Matrix with labels\n\n')
ax.set_xlabel('\nPredicted Values')
ax.set_ylabel('Actual Values ')
 
 
 
## Display the visualization of the Confusion Matrix. plt.show() 
















Certainly, let's break down the steps for implementing the K-Nearest Neighbors (K-NN) algorithm on the "diabetes.csv" dataset and compute the confusion matrix, accuracy, error rate, precision, and recall:

1. **Understand the Objective**:
   - The goal is to use the K-NN algorithm to predict whether individuals have diabetes based on various features like glucose levels, age, BMI, etc.

2. **Load the Dataset**:
   - Start by loading the "diabetes.csv" dataset into your programming environment. This dataset contains information about individuals and whether they have diabetes.

3. **Data Preprocessing**:
   - Examine the dataset for missing values, outliers, and any necessary data cleaning. You may need to handle any missing or inconsistent data to ensure the dataset is ready for analysis.

4. **Feature Selection**:
   - Identify the features (attributes) in the dataset that will be used for prediction. In this case, features may include glucose levels, age, BMI, etc.

5. **Split the Data**:
   - Divide the dataset into two parts: a training set and a testing set. Common splits are 70-80% of the data for training and the remaining 20-30% for testing.

6. **Implement K-Nearest Neighbors (K-NN)**:
   - Initialize the K-NN algorithm. It works by comparing the data of a new individual to the data of its K nearest neighbors in the training dataset.
   - Choose a suitable value for 'K,' which represents the number of neighbors to consider. This choice can impact the model's performance.

7. **Train the Model**:
   - Train the K-NN model using the training dataset, meaning it learns from this data to make predictions.

8. **Make Predictions**:
   - Use the trained K-NN model to make predictions on the testing dataset. It will predict whether each individual has diabetes or not.

9. **Compute the Confusion Matrix**:
   - Calculate a confusion matrix, which is a table that shows the true positive (correctly predicted diabetes cases), true negative (correctly predicted non-diabetes cases), false positive (predicted diabetes but not true), and false negative (predicted non-diabetes but not true) values.

10. **Calculate Metrics**:
    - Use the values from the confusion matrix to compute several important metrics:
      - **Accuracy**: The proportion of correct predictions, calculated as (TP + TN) / (TP + TN + FP + FN).
      - **Error Rate**: The proportion of incorrect predictions, calculated as 1 - Accuracy.
      - **Precision**: The ability of the model to correctly identify individuals with diabetes, calculated as TP / (TP + FP).
      - **Recall**: The ability of the model to correctly identify individuals with diabetes among all individuals who actually have diabetes, calculated as TP / (TP + FN).

11. **Evaluate and Interpret**:
    - Interpret the metrics to understand how well the K-NN model is performing in predicting diabetes. High accuracy, precision, and recall are desirable, while a low error rate is preferable.

By following these steps, you can implement the K-NN algorithm on the diabetes dataset and assess its performance in predicting diabetes status. This analysis will help you understand how well the model is working and its ability to make accurate predictions.










